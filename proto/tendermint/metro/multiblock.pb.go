// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/metro/multiblock.proto

package metro

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultiBlock struct {
	Blocks     []SimpleBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks"`
	LastCommit *types.Commit `protobuf:"bytes,2,opt,name=last_commit,json=lastCommit,proto3" json:"last_commit,omitempty"`
}

func (m *MultiBlock) Reset()         { *m = MultiBlock{} }
func (m *MultiBlock) String() string { return proto.CompactTextString(m) }
func (*MultiBlock) ProtoMessage()    {}
func (*MultiBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dfb816e29e343f4, []int{0}
}
func (m *MultiBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiBlock.Merge(m, src)
}
func (m *MultiBlock) XXX_Size() int {
	return m.Size()
}
func (m *MultiBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MultiBlock proto.InternalMessageInfo

func (m *MultiBlock) GetBlocks() []SimpleBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *MultiBlock) GetLastCommit() *types.Commit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type SimpleBlock struct {
	Header   types.Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Data     types.Data         `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	Evidence types.EvidenceList `protobuf:"bytes,3,opt,name=evidence,proto3" json:"evidence"`
}

func (m *SimpleBlock) Reset()         { *m = SimpleBlock{} }
func (m *SimpleBlock) String() string { return proto.CompactTextString(m) }
func (*SimpleBlock) ProtoMessage()    {}
func (*SimpleBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dfb816e29e343f4, []int{1}
}
func (m *SimpleBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleBlock.Merge(m, src)
}
func (m *SimpleBlock) XXX_Size() int {
	return m.Size()
}
func (m *SimpleBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleBlock proto.InternalMessageInfo

func (m *SimpleBlock) GetHeader() types.Header {
	if m != nil {
		return m.Header
	}
	return types.Header{}
}

func (m *SimpleBlock) GetData() types.Data {
	if m != nil {
		return m.Data
	}
	return types.Data{}
}

func (m *SimpleBlock) GetEvidence() types.EvidenceList {
	if m != nil {
		return m.Evidence
	}
	return types.EvidenceList{}
}

func init() {
	proto.RegisterType((*MultiBlock)(nil), "tendermint.metro.MultiBlock")
	proto.RegisterType((*SimpleBlock)(nil), "tendermint.metro.SimpleBlock")
}

func init() { proto.RegisterFile("tendermint/metro/multiblock.proto", fileDescriptor_8dfb816e29e343f4) }

var fileDescriptor_8dfb816e29e343f4 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x49, 0xcd, 0x4b,
	0x49, 0x2d, 0xca, 0xcd, 0xcc, 0x2b, 0xd1, 0xcf, 0x4d, 0x2d, 0x29, 0xca, 0xd7, 0xcf, 0x2d, 0xcd,
	0x29, 0xc9, 0x4c, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x40,
	0x28, 0xd1, 0x03, 0x2b, 0x91, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xea, 0x83, 0x58, 0x10,
	0x75, 0x52, 0x32, 0x48, 0x46, 0x95, 0x54, 0x16, 0xa4, 0x16, 0x43, 0x48, 0xa8, 0xac, 0x3c, 0x86,
	0x6c, 0x6a, 0x59, 0x66, 0x4a, 0x6a, 0x5e, 0x72, 0x2a, 0x44, 0x81, 0x52, 0x0b, 0x23, 0x17, 0x97,
	0x2f, 0xc8, 0x6e, 0x27, 0x90, 0xdd, 0x42, 0xd6, 0x5c, 0x6c, 0x60, 0x47, 0x14, 0x4b, 0x30, 0x2a,
	0x30, 0x6b, 0x70, 0x1b, 0xc9, 0xea, 0xa1, 0x3b, 0x43, 0x2f, 0x38, 0x33, 0xb7, 0x20, 0x27, 0x15,
	0xac, 0xdc, 0x89, 0xe5, 0xc4, 0x3d, 0x79, 0x86, 0x20, 0xa8, 0x16, 0x21, 0x4b, 0x2e, 0xee, 0x9c,
	0xc4, 0xe2, 0x92, 0xf8, 0xe4, 0xfc, 0xdc, 0xdc, 0xcc, 0x12, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e,
	0x23, 0x09, 0x64, 0x13, 0x20, 0x4e, 0x73, 0x06, 0xcb, 0x07, 0x71, 0x81, 0x14, 0x43, 0xd8, 0x4a,
	0x3b, 0x19, 0xb9, 0xb8, 0x91, 0x0c, 0x16, 0x32, 0xe3, 0x62, 0xcb, 0x48, 0x4d, 0x4c, 0x49, 0x2d,
	0x92, 0x60, 0xc4, 0x65, 0x8a, 0x07, 0x58, 0x1e, 0xe6, 0x04, 0x88, 0x6a, 0x21, 0x03, 0x2e, 0x96,
	0x94, 0xc4, 0x92, 0x44, 0xa8, 0xdd, 0x62, 0x98, 0xba, 0x5c, 0x12, 0x4b, 0x12, 0xa1, 0x7a, 0xc0,
	0x2a, 0x85, 0x1c, 0xb8, 0x38, 0x60, 0x41, 0x22, 0xc1, 0x0c, 0xd6, 0x25, 0x87, 0xa9, 0xcb, 0x15,
	0xaa, 0xc2, 0x27, 0xb3, 0xb8, 0x04, 0xaa, 0x1b, 0xae, 0xcb, 0x29, 0xf0, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39,
	0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xcc, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3,
	0x73, 0xf5, 0x91, 0x23, 0x02, 0xc1, 0x84, 0x44, 0x27, 0x7a, 0x6a, 0x48, 0x62, 0x03, 0x8b, 0x1b,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x61, 0xf0, 0x43, 0x28, 0x02, 0x00, 0x00,
}

func (m *MultiBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommit != nil {
		{
			size, err := m.LastCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiblock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMultiblock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Evidence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiblock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiblock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiblock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMultiblock(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultiblock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovMultiblock(uint64(l))
		}
	}
	if m.LastCommit != nil {
		l = m.LastCommit.Size()
		n += 1 + l + sovMultiblock(uint64(l))
	}
	return n
}

func (m *SimpleBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovMultiblock(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovMultiblock(uint64(l))
	l = m.Evidence.Size()
	n += 1 + l + sovMultiblock(uint64(l))
	return n
}

func sovMultiblock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultiblock(x uint64) (n int) {
	return sovMultiblock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiblock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiblock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiblock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, SimpleBlock{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiblock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiblock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCommit == nil {
				m.LastCommit = &types.Commit{}
			}
			if err := m.LastCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiblock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiblock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiblock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiblock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiblock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiblock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiblock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiblock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiblock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Evidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiblock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiblock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultiblock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultiblock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiblock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultiblock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultiblock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultiblock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultiblock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultiblock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultiblock = fmt.Errorf("proto: unexpected end of group")
)
